package main

//
// a grep application "plugin" for MapReduce.
//
// go build -buildmode=plugin mygrep.go
//

import (
	"6.5840/mr"
	"fmt"
	"strings"
)

// The grep function is called once for each file of input. The first
// argument is the name of the input file, and the second is the
// file's complete contents. The return value is a slice
// of key/value pairs.
func Map(filename string, contents string) []mr.KeyValue {
	// 为了方便测试，指定模式串为'happy'
	REGSTR := `happy`

	// Your code here.
	kva := make([]mr.KeyValue, 0)
	// find all lines that contain the REGSTR
	for LineNo, line := range strings.Split(contents, "\n") {
		if strings.Contains(line, REGSTR) {
			// emit {line, "File:filename   LineNo:LineNo"}
			kva = append(kva, mr.KeyValue{line, fmt.Sprintf("File:%s   LineNo:%d", filename, LineNo)})
		}
	}
	return kva
}

// The reduce function is called once for each key generated by the
// map tasks, with a list of all the values created for that key by
// any map task.
func Reduce(key string, values []string) string {
	// Your code here.
	OutputString := fmt.Sprintf("          | Occurrence=%d   ", len(values))
	// If there are multiple occurrences of a line with the same content, output the number of occurrences and the location of all occurrences
	for _, location := range values {
		OutputString += fmt.Sprintf("Location(%s),", location)
	}
	return OutputString[:len(OutputString)-1]
}
